package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.Rectangle2D;
import java.util.Map;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JPanel;

import model.Board;
import model.MovableTetrisPiece;

public class TetrisInfoPanel extends JPanel implements Observer
{
    /**
     * The size of the JPanel.
     */
    private static final Dimension PANEL_SIZE = new Dimension(200, 350);
    
    /**
     * 
     */
    private final Board myBoard; 
    
    /**
     * 
     */
    private int myX;
    
    /**
     * 
     */
    private int myY;
    
    /**
     * 
     */
    private MovableTetrisPiece myNextPiece;
      
    /**
     * 
     */
    private final Map<Character, Color> myBlocks;
    
    public TetrisInfoPanel(Map<Character, Color> theBlocks, Board theBoard)
    {
        super();
        myBlocks = theBlocks;
        myBoard = theBoard;
        createPanel();
    }
    
    private void createPanel()
    {
        setBackground(Color.BLACK);
        setPreferredSize(PANEL_SIZE);
        myBoard.addObserver(this);
    }
    
    @Override
    public void paintComponent(final Graphics theGraphics)
    {
        myX = 0;
        myY = 0;
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setColor(Color.GRAY);
        g2d.drawRect(45, 45, 100, 100);
        g2d.drawLine(0, getHeight() / 2, getWidth(), getHeight() / 2);
        g2d.setColor(Color.RED);
        g2d.setFont(new Font(Font.SERIF, Font.BOLD, 20));
        g2d.drawString("Next Piece", 50, 20);
        
        for (int i = 0; i < myNextPiece.toString().length(); i++)
        {
            myX += 15;
            if (myNextPiece.toString().charAt(i) == '\n')
            {
                myY += 15;
                myX = 0;
            }
            else if (myBlocks.containsKey(myNextPiece.toString().charAt(i)))
            {
                g2d.setColor(myBlocks.get
                             (myNextPiece.toString().charAt(i))); 
                if (myNextPiece.toString().charAt(i) == 'O' || 
                                myNextPiece.toString().charAt(i) == 'I')
                {
                    g2d.fill(new Rectangle2D.Double(myX + 50, myY + 65, 15, 15));
                    g2d.setColor(Color.BLACK);
                    g2d.draw(new Rectangle2D.Double(myX + 50, myY + 65, 15, 15));
                }                        
                else 
                {
                    g2d.fill(new Rectangle2D.Double(myX + 55, myY + 60, 15, 15));
                    g2d.setColor(Color.BLACK);
                    g2d.draw(new Rectangle2D.Double(myX + 55, myY + 60, 15, 15)); 
                }
                
            }
        }
        g2d.setColor(Color.RED);
        g2d.drawString("Scoring", getWidth() / 2 - 30, (getHeight() / 2) + 15);
        g2d.drawString("(To be implemented)", 15, getHeight() / 2 + 30);
        
        
    }
    
    @Override
    public void update(final Observable theObs, final Object theObj)
    {
        if (theObj instanceof MovableTetrisPiece)
        {
            myNextPiece = (MovableTetrisPiece) theObj;
            
            repaint();
        }        
    }
}
