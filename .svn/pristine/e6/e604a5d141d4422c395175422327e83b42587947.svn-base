package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.geom.Rectangle2D;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JPanel;
import javax.swing.Timer;

import model.Board;
import model.MovableTetrisPiece;

/**
 * 
 * @author Brandon Gaetaniello
 *
 */
public class TetrisDrawingPanel extends JPanel implements Observer
{

    /**
     * The size of the JPanel.
     */
    private static final Dimension PANEL_SIZE = new Dimension(215, 350);
    
    /**
     * 
     */
    private static int myDelay = 1000;
    
    /**
     * 
     */
    private final Timer myTimer;
    
    /**
     * 
     */
    private final Board myBoard;
    
    /**
     * 
     */
    private String myBoardString;
    
    /**
     * 
     */
    private int myX;
    
    /**
     * 
     */
    private int myY;
    
    /**
     * 
     */
    private Map<Character, Color> myBlocks;
    
    /**
     * 
     */
    public TetrisDrawingPanel(Map<Character, Color> theBlocks)
    {
        super();
        myBlocks = theBlocks;
        setPreferredSize(PANEL_SIZE);
        setBackground(Color.BLACK);
        myTimer = new Timer(myDelay, new TimerListener());
        myTimer.setDelay(myDelay);
        myBoard = new Board();
        myBoard.addObserver(this);
        myBoardString = myBoard.toString();
        setup();
        
    }
    
    /**
     * 
     */
    private void setup()
    {
        addKeyListener(new KeyBoardListener());
        addFocusListener(new FocusCheck());
        setFocusable(true);
        myBoard.newGame();
        myTimer.start();
        
        
    }
    
    
    @Override
    public void paintComponent(final Graphics theGraphics)
    {
        myY = 0;
        myX = 0;
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                               RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setColor(Color.GRAY);
        g2d.drawRect(30, 30, 150, 300);
        for (int i = 50; i < myBoardString.length(); i++)
        {
            myX += 15;
            if (myBoardString.charAt(i) == '\n')
            {
                myY += 15;
                myX = 0;
            }
            
            else if (myBlocks.containsKey(myBoardString.charAt(i)))
            {
                g2d.setColor(myBlocks.get(myBoardString.charAt(i)));                         
                g2d.fill(new Rectangle2D.Double(myX, myY, 15, 15));
                g2d.setColor(Color.BLACK);
                g2d.draw(new Rectangle2D.Double(myX, myY, 15, 15));
            }
        }
    }
    
    @Override
    public void update(final Observable theObs, final Object theObj)
    {
        if (theObj instanceof String)
        {
            myBoardString = (String) theObj;
        }
        
        if (theObj instanceof Boolean)
        {
            System.out.println("GAME OVER");
            myTimer.stop();
        }
        
        
        // If a line is cleared
        if (theObj instanceof Integer[])
        {
            System.out.println(Arrays.toString((Integer[]) theObj));
        }
        repaint();
    }
    
    /**
     * 
     *
     */
    private class TimerListener implements ActionListener
    {

        @Override
        public void actionPerformed(final ActionEvent theEvent)
        {
            myBoard.down();
        }
        
    }
    
    /**
     * 
     *
     */
    private class KeyBoardListener extends KeyAdapter
    {
        @Override
        public void keyPressed(final KeyEvent theEvent)
        {
            if (theEvent.getKeyCode() == KeyEvent.VK_LEFT)
            {
                myBoard.left();
            }
            
            if (theEvent.getKeyCode() == KeyEvent.VK_RIGHT)
            {
                myBoard.right();
            }
            
            if (theEvent.getKeyCode() == KeyEvent.VK_DOWN)
            {
                myBoard.down();
            }
            
            if (theEvent.getKeyCode() == KeyEvent.VK_SPACE)
            {
                myBoard.drop();
            }
            
            if (theEvent.getKeyCode() == KeyEvent.VK_R)
            {
                myBoard.rotate();
            }
        }
    }
    
    /**
     * 
     *
     */
    private class FocusCheck implements FocusListener
    {

        @Override
        public void focusGained(final FocusEvent theEvent)
        {
            myTimer.start();            
        }

        @Override
        public void focusLost(final FocusEvent theEvent)
        {
            myTimer.stop();            
        }
        
    }
}
